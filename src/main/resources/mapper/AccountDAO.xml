<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nuoze.cctower.dao.AccountDAO">
  <resultMap id="BaseResultMap" type="com.nuoze.cctower.pojo.entity.Account">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="balance" jdbcType="DECIMAL" property="balance" />
    <result column="service_charge" jdbcType="INTEGER" property="serviceCharge" />
    <result column="card" jdbcType="VARCHAR" property="card" />
    <result column="bank" jdbcType="VARCHAR" property="bank" />
    <result column="bank_address" jdbcType="VARCHAR" property="bankAddress" />
    <result column="parking_id" jdbcType="BIGINT" property="parkingId" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="service_fee" jdbcType="DECIMAL" property="serviceFee" />
  </resultMap>
  <sql id="Base_Column_List">
    id, balance, service_charge, card, bank, bank_address, parking_id, create_time, service_fee
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from account
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from account
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.nuoze.cctower.pojo.entity.Account">
    insert into account (id, balance, service_charge, card, bank, bank_address, parking_id, create_time, service_fee)
    values (#{id,jdbcType=BIGINT}, #{balance,jdbcType=DECIMAL}, #{serviceCharge,jdbcType=INTEGER}, #{card,jdbcType=VARCHAR},
      #{bank,jdbcType=VARCHAR}, #{bankAddress,jdbcType=VARCHAR}, #{parkingId,jdbcType=BIGINT}, #{createTime,jdbcType=TIMESTAMP}, #{serviceFee,jdbcType=DECIMAL})
  </insert>
  <insert id="insertSelective" parameterType="com.nuoze.cctower.pojo.entity.Account">
    insert into account
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="balance != null">
        balance,
      </if>
      <if test="service_charge != null">
        serviceCharge,
      </if>
      <if test="card != null">
        card,
      </if>
      <if test="bank != null">
        bank,
      </if>
      <if test="bankAddress != null">
        bank_address,
      </if>
      <if test="parkingId != null">
        parking_id,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="serviceFee != null">
        service_fee,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="balance != null">
        #{balance,jdbcType=DECIMAL},
      </if>
      <if test="serviceCharge != null">
        #{serviceCharge,jdbcType=INTEGER},
      </if>
      <if test="card != null">
        #{card,jdbcType=VARCHAR},
      </if>
      <if test="bank != null">
        #{bank,jdbcType=VARCHAR},
      </if>
      <if test="bankAddress != null">
        #{bankAddress,jdbcType=VARCHAR},
      </if>
      <if test="parkingId != null">
        #{parkingId,jdbcType=BIGINT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="serviceFee != null">
        #{serviceFee,jdbcType=DECIMAL},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.nuoze.cctower.pojo.entity.Account">
    update account
    <set>
      <if test="balance != null">
        balance = #{balance,jdbcType=DECIMAL},
      </if>
      <if test="serviceCharge != null">
        service_charge = #{serviceCharge,jdbcType=INTEGER},
      </if>
      <if test="card != null">
        card = #{card,jdbcType=VARCHAR},
      </if>
      <if test="bank != null">
        bank = #{bank,jdbcType=VARCHAR},
      </if>
      <if test="bankAddress != null">
        bank_address = #{bankAddress,jdbcType=VARCHAR},
      </if>
      <if test="parkingId != null">
        parking_id = #{parkingId,jdbcType=BIGINT},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="serviceFee != null">
        service_fee = #{serviceFee,jdbcType=DECIMAL},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.nuoze.cctower.pojo.entity.Account">
    update account
    set balance = #{balance,jdbcType=DECIMAL},
      service_charge = #{serviceCharge,jdbcType=INTEGER},
      card = #{card,jdbcType=VARCHAR},
      bank = #{bank,jdbcType=VARCHAR},
      bank_address = #{bankAddress,jdbcType=VARCHAR},
      parking_id = #{parkingId,jdbcType=BIGINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      service_fee = #{serviceFee,jdbcType=DECIMAL}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <select id="list" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from account
    <where>
      <if test="id != null and id != ''">and id = #{id}</if>
      <if test="balance != null and balance != ''">and balance = #{balance}</if>
      <if test="card != null and card != ''">and card = #{card}</if>
      <if test="bank != null and bank != ''">and bank = #{bank}</if>
      <if test="bankAddress != null and bankAddress != ''">and bank_address = #{bankAddress}</if>
      <if test="serviceFee != null and serviceFee != ''">and service_fee = #{serviceFee}</if>
      <if test="parkingId != null and parkingId != ''">and parking_id = #{parkingId}</if>
      <if test="keyword != null and keyword != ''">
        AND (card LIKE CONCAT('%',#{keyword},'%')
        or bank_address LIKE CONCAT('%',#{keyword},'%'))
      </if>
      <if test="parkingIds != null and parkingIds.size > 0 ">
        and parking_id in
        <foreach item="parkingId" collection="parkingIds" open="(" separator="," close=")">
          #{parkingId}
        </foreach>
      </if>
    </where>
    <choose>
      <when test="sort != null and sort.trim() != ''">
        order by ${sort} ${order}
      </when>
      <otherwise>
        order by id desc
      </otherwise>
    </choose>
    <if test="offset != null and limit != null">
      limit #{offset}, #{limit}
    </if>
  </select>

  <select id="count" resultType="int">
    select count(id)
    from account
    <where>
      <if test="id != null and id != ''">and id = #{id}</if>
      <if test="balance != null and balance != ''">and balance = #{balance}</if>
      <if test="card != null and card != ''">and card = #{card}</if>
      <if test="bank != null and bank != ''">and bank = #{bank}</if>
      <if test="bankAddress != null and bankAddress != ''">and bank_address = #{bankAddress}</if>
      <if test="serviceFee != null and serviceFee != ''">and service_fee = #{serviceFee}</if>
      <if test="parkingId != null and parkingId != ''">and parking_id = #{parkingId}</if>
      <if test="keyword != null and keyword != ''">
        AND (card LIKE CONCAT('%',#{keyword},'%')
        or bank_address LIKE CONCAT('%',#{keyword},'%'))
      </if>
      <if test="parkingIds != null and parkingIds.size > 0 ">
        and parking_id in
        <foreach item="parkingId" collection="parkingIds" open="(" separator="," close=")">
          #{parkingId}
        </foreach>
      </if>
    </where>
  </select>

  <delete id="batchRemove">
    delete
    from account
    where id in
    <foreach item="id" collection="array" open="(" separator="," close=")">
      #{id}
    </foreach>
  </delete>

  <select id="selectByParkingId" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from account
    where parking_id = #{parkingId, jdbcType=BIGINT}
  </select>

  <delete id="deleteByParkingId" parameterType="java.lang.Long">
    delete from account
    where parking_id = #{parkingId,jdbcType=BIGINT}
  </delete>
</mapper>