<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nuoze.cctower.dao.DepositRecordDAO">
  <resultMap id="BaseResultMap" type="com.nuoze.cctower.pojo.entity.DepositRecord">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="amount" jdbcType="DECIMAL" property="amount" />
    <result column="service_charge" jdbcType="DECIMAL" property="serviceCharge" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="account_id" jdbcType="BIGINT" property="accountId" />
    <result column="parking_id" jdbcType="BIGINT" property="parkingId" />
    <result column="card" jdbcType="VARCHAR" property="card" />
    <result column="bank_address" jdbcType="VARCHAR" property="bankAddress" />
    <result column="status" jdbcType="TINYINT" property="status" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="transfer_time" jdbcType="TIMESTAMP" property="transferTime" />
  </resultMap>
  <sql id="Base_Column_List">
    id, amount, service_charge, user_id, account_id, parking_id, card, bank_address, `status`, create_time, transfer_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from deposit_record
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from deposit_record
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.nuoze.cctower.pojo.entity.DepositRecord">
    insert into deposit_record (id, amount, service_charge, user_id, account_id,
      parking_id, card, bank_address, 
      `status`, create_time, transfer_time
      )
    values (#{id,jdbcType=BIGINT}, #{amount,jdbcType=DECIMAL}, #{serviceCharge,jdbcType=DECIMAL},  #{userId,jdbcType=BIGINT}, #{accountId,jdbcType=BIGINT},
      #{parkingId,jdbcType=BIGINT}, #{card,jdbcType=VARCHAR}, #{bankAddress,jdbcType=VARCHAR}, 
      #{status,jdbcType=TINYINT}, #{createTime,jdbcType=TIMESTAMP}, #{transferTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.nuoze.cctower.pojo.entity.DepositRecord">
    insert into deposit_record
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="amount != null">
        amount,
      </if>
      <if test="serviceCharge != null">
        service_charge,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="accountId != null">
        account_id,
      </if>
      <if test="parkingId != null">
        parking_id,
      </if>
      <if test="card != null">
        card,
      </if>
      <if test="bankAddress != null">
        bank_address,
      </if>
      <if test="status != null">
        `status`,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="transferTime != null">
        transfer_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="amount != null">
        #{amount,jdbcType=DECIMAL},
      </if>
      <if test="serviceCharge != null">
        #{serviceCharge,jdbcType=DECIMAL},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="accountId != null">
        #{accountId,jdbcType=BIGINT},
      </if>
      <if test="parkingId != null">
        #{parkingId,jdbcType=BIGINT},
      </if>
      <if test="card != null">
        #{card,jdbcType=VARCHAR},
      </if>
      <if test="bankAddress != null">
        #{bankAddress,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=TINYINT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="transferTime != null">
        #{transferTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.nuoze.cctower.pojo.entity.DepositRecord">
    update deposit_record
    <set>
      <if test="amount != null">
        amount = #{amount,jdbcType=DECIMAL},
      </if>
      <if test="serviceCharge != null">
        service_charge = #{serviceCharge,jdbcType=DECIMAL},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="accountId != null">
        account_id = #{accountId,jdbcType=BIGINT},
      </if>
      <if test="parkingId != null">
        parking_id = #{parkingId,jdbcType=BIGINT},
      </if>
      <if test="card != null">
        card = #{card,jdbcType=VARCHAR},
      </if>
      <if test="bankAddress != null">
        bank_address = #{bankAddress,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        `status` = #{status,jdbcType=TINYINT},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="transferTime != null">
        transfer_time = #{transferTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.nuoze.cctower.pojo.entity.DepositRecord">
    update deposit_record
    set amount = #{amount,jdbcType=DECIMAL},
      service_charge = #{serviceCharge,jdbcType=DECIMAL},
      user_id = #{userId,jdbcType=BIGINT},
      account_id = #{accountId,jdbcType=BIGINT},
      parking_id = #{parkingId,jdbcType=BIGINT},
      card = #{card,jdbcType=VARCHAR},
      bank_address = #{bankAddress,jdbcType=VARCHAR},
      `status` = #{status,jdbcType=TINYINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      transfer_time = #{transferTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <select id="list" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from deposit_record
    <where>
      <if test="id != null and id != ''">and id = #{id}</if>
      <if test="amount != null and amount != ''">and amount = #{amount}</if>
      <if test="userId != null and userId != ''">and user_id = #{userId}</if>
      <if test="accountId != null and accountId != ''">and account_id = #{accountId}</if>
      <if test="parkingId != null and parkingId != ''">and parking_id = #{parkingId}</if>
      <if test="card != null and card != ''">and card = #{card}</if>
      <if test="bankAddress != null and bankAddress != ''">and bank_address = #{bankAddress}</if>
      <if test="status != null and status != ''">and status = #{status}</if>
      <if test="keyword != null and keyword != ''">
        AND (card LIKE CONCAT('%',#{keyword},'%')
        or bank_address LIKE CONCAT('%',#{keyword},'%'))
      </if>
      <if test="parkingIds != null and parkingIds.size > 0 ">
        and parking_id in
        <foreach item="parkingId" collection="parkingIds" open="(" separator="," close=")">
          #{parkingId}
        </foreach>
      </if>
    </where>
    <choose>
      <when test="sort != null and sort.trim() != ''">
        order by ${sort} ${order}
      </when>
      <otherwise>
        order by create_time desc
      </otherwise>
    </choose>
    <if test="offset != null and limit != null">
      limit #{offset}, #{limit}
    </if>
  </select>

  <select id="count" resultType="int">
    select count(id)
    from deposit_record
    <where>
      <if test="id != null and id != ''">and id = #{id}</if>
      <if test="amount != null and amount != ''">and amount = #{amount}</if>
      <if test="userId != null and userId != ''">and user_id = #{userId}</if>
      <if test="accountId != null and accountId != ''">and account_id = #{accountId}</if>
      <if test="parkingId != null and parkingId != ''">and parking_id = #{parkingId}</if>
      <if test="card != null and card != ''">and card = #{card}</if>
      <if test="bankAddress != null and bankAddress != ''">and bank_address = #{bankAddress}</if>
      <if test="status != null and status != ''">and status = #{status}</if>
      <if test="keyword != null and keyword != ''">
        AND (card LIKE CONCAT('%',#{keyword},'%')
        or bank_address LIKE CONCAT('%',#{keyword},'%'))
      </if>
      <if test="parkingIds != null and parkingIds.size > 0 ">
        and parking_id in
        <foreach item="parkingId" collection="parkingIds" open="(" separator="," close=")">
          #{parkingId}
        </foreach>
      </if>
    </where>
  </select>

  <delete id="batchRemove">
    delete
    from deposit_record
    where id in
    <foreach item="id" collection="array" open="(" separator="," close=")">
      #{id}
    </foreach>
  </delete>

</mapper>