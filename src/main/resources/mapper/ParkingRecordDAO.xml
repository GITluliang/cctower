<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nuoze.cctower.dao.ParkingRecordDAO">
  <resultMap id="BaseResultMap" type="com.nuoze.cctower.pojo.entity.ParkingRecord">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="uuid" jdbcType="VARCHAR" property="uuid" />
    <result column="open_id" jdbcType="VARCHAR" property="openId" />
    <result column="order_sn" jdbcType="VARCHAR" property="orderSn" />
    <result column="prepay_id" jdbcType="VARCHAR" property="prepayId" />
    <result column="pay_id" jdbcType="VARCHAR" property="payId" />
    <result column="pay_type" jdbcType="TINYINT" property="payType" />
    <result column="car_number" jdbcType="VARCHAR" property="carNumber" />
    <result column="parking_id" jdbcType="BIGINT" property="parkingId" />
    <result column="entrance_id" jdbcType="BIGINT" property="entranceId" />
    <result column="exit_id" jdbcType="BIGINT" property="exitId" />
    <result column="unit_price" jdbcType="DECIMAL" property="unitPrice" />
    <result column="cost_time" jdbcType="INTEGER" property="costTime" />
    <result column="cost" jdbcType="DECIMAL" property="cost" />
    <result column="pay_status" jdbcType="TINYINT" property="payStatus" />
    <result column="status" jdbcType="TINYINT" property="status" />
    <result column="in_time" jdbcType="TIMESTAMP" property="inTime" />
    <result column="pay_time" jdbcType="TIMESTAMP" property="payTime" />
    <result column="out_time" jdbcType="TIMESTAMP" property="outTime" />
    <result column="applet_order_sn" jdbcType="VARCHAR" property="appletOrderSn" />
    <result column="qr_code_order_sn" jdbcType="VARCHAR" property="qrCodeOrderSn" />
  </resultMap>
  <sql id="Base_Column_List">
    id, uuid, open_id, order_sn, prepay_id, pay_id, pay_type, car_number, parking_id, entrance_id, exit_id, unit_price, cost_time, cost, pay_status, `status`, in_time,
    pay_time, out_time, applet_order_sn, qr_code_order_sn
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from parking_record
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from parking_record
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.nuoze.cctower.pojo.entity.ParkingRecord">
    insert into parking_record (id, uuid, open_id, order_sn, prepay_id, pay_id, pay_type, car_number, parking_id,
      entrance_id, exit_id, unit_price, cost_time, cost, pay_status, `status`, in_time, pay_time,out_time, applet_order_sn, qr_code_order_sn)
    values (#{id,jdbcType=BIGINT}, #{uuid,jdbcType=VARCHAR}, #{openId,jdbcType=VARCHAR}, #{orderSn,jdbcType=VARCHAR}, #{prepayId,jdbcType=VARCHAR},
            #{payId,jdbcType=VARCHAR}, #{payType,jdbcType=TINYINT}, #{carNumber,jdbcType=VARCHAR}, #{parkingId,jdbcType=BIGINT}, #{entranceId,jdbcType=BIGINT},
            #{exitId,jdbcType=BIGINT}, #{unitPrice,jdbcType=DECIMAL}, #{costTime,jdbcType=INTEGER}, #{cost,jdbcType=DECIMAL},
            #{payStatus,jdbcType=TINYINT}, #{status,jdbcType=TINYINT}, #{inTime,jdbcType=TIMESTAMP},
            #{payTime,jdbcType=TIMESTAMP}, #{outTime,jdbcType=TIMESTAMP}, #{appletOrderSn,jdbcType=VARCHAR}, #{qrCodeOrderSn,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.nuoze.cctower.pojo.entity.ParkingRecord">
    insert into parking_record
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="uuid != null">
        uuid,
      </if>
      <if test="openId != null">
        open_id,
      </if>
      <if test="orderSn != null">
        order_sn,
      </if>
      <if test="prepayId != null">
        prepay_id,
      </if>
      <if test="payId != null">
        pay_id,
      </if>
      <if test="payType != null">
        pay_type,
      </if>
      <if test="carNumber != null">
        car_number,
      </if>
      <if test="parkingId != null">
        parking_id,
      </if>
      <if test="entranceId != null">
        entrance_id,
      </if>
      <if test="exitId != null">
        exit_id,
      </if>
      <if test="unitPrice != null">
        unit_price,
      </if>
      <if test="costTime != null">
        cost_time,
      </if>
      <if test="cost != null">
        cost,
      </if>
      <if test="payStatus != null">
        pay_status,
      </if>
      <if test="status != null">
        `status`,
      </if>
      <if test="inTime != null">
        in_time,
      </if>
      <if test="payTime != null">
        pay_time,
      </if>
      <if test="outTime != null">
        out_time,
      </if>
      <if test="appletOrderSn != null">
        appletOrderSn,
      </if>
      <if test="qrCodeOrderSn != null">
        qrCodeOrderSn,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="uuid != null">
        #{uuid,jdbcType=VARCHAR},
      </if>
      <if test="openId != null">
        #{openId,jdbcType=VARCHAR},
      </if>
      <if test="orderSn != null">
        #{orderSn,jdbcType=VARCHAR},
      </if>
      <if test="prepayId != null">
        #{prepayId,jdbcType=VARCHAR},
      </if>
      <if test="payId != null">
        #{payId,jdbcType=VARCHAR},
      </if>
      <if test="payType != null">
        #{payType,jdbcType=TINYINT},
      </if>
      <if test="carNumber != null">
        #{carNumber,jdbcType=VARCHAR},
      </if>
      <if test="parkingId != null">
        #{parkingId,jdbcType=BIGINT},
      </if>
      <if test="entranceId != null">
        #{entranceId,jdbcType=BIGINT},
      </if>
      <if test="exitId != null">
        #{exitId,jdbcType=BIGINT},
      </if>
      <if test="unitPrice != null">
        #{unitPrice,jdbcType=DECIMAL},
      </if>
      <if test="costTime != null">
        #{cost_time,jdbcType=INTEGER},
      </if>
      <if test="cost != null">
        #{cost,jdbcType=DECIMAL},
      </if>
      <if test="payStatus != null">
        #{pay_status,jdbcType=TINYINT},
      </if>
      <if test="status != null">
        #{status,jdbcType=TINYINT},
      </if>
      <if test="inTime != null">
        #{inTime,jdbcType=TIMESTAMP},
      </if>
      <if test="payTime != null">
        #{payTime,jdbcType=TIMESTAMP},
      </if>
      <if test="outTime != null">
        #{outTime,jdbcType=TIMESTAMP},
      </if>
      <if test="appletOrderSn != null">
        #{appletOrderSn,jdbcType=VARCHAR},
      </if>
      <if test="qrCodeOrderSn != null">
        #{qrCodeOrderSn,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.nuoze.cctower.pojo.entity.ParkingRecord">
    update parking_record
    <set>
      <if test="uuid != null">
        uuid = #{uuid,jdbcType=VARCHAR},
      </if>
      <if test="openId != null">
        open_id = #{openId,jdbcType=VARCHAR},
      </if>
      <if test="orderSn != null">
        order_sn = #{orderSn,jdbcType=VARCHAR},
      </if>
      <if test="prepayId != null">
        prepay_id = #{prepayId,jdbcType=VARCHAR},
      </if>
      <if test="payId != null">
        pay_id = #{payId,jdbcType=VARCHAR},
      </if>
      <if test="payType != null">
        pay_type = #{payType,jdbcType=TINYINT},
      </if>
      <if test="carNumber != null">
        car_number = #{carNumber,jdbcType=VARCHAR},
      </if>
      <if test="parkingId != null">
        parking_id = #{parkingId,jdbcType=BIGINT},
      </if>
      <if test="entranceId != null">
        entrance_id = #{entranceId,jdbcType=BIGINT},
      </if>
      <if test="exitId != null">
        exit_id = #{exitId,jdbcType=BIGINT},
      </if>
      <if test="unitPrice != null">
        unit_price = #{unitPrice,jdbcType=DECIMAL},
      </if>
      <if test="costTime != null">
        cost_time = #{costTime,jdbcType=INTEGER},
      </if>
      <if test="cost != null">
        cost = #{cost,jdbcType=DECIMAL},
      </if>
      <if test="payStatus != null">
        pay_status = #{payStatus,jdbcType=TINYINT},
      </if>
      <if test="status != null">
        `status` = #{status,jdbcType=TINYINT},
      </if>
      <if test="inTime != null">
        in_time = #{inTime,jdbcType=TIMESTAMP},
      </if>
      <if test="payTime != null">
        pay_time = #{payTime,jdbcType=TIMESTAMP},
      </if>
      <if test="outTime != null">
        out_time = #{outTime,jdbcType=TIMESTAMP},
      </if>
      <if test="appletOrderSn != null">
        applet_order_sn = #{appletOrderSn,jdbcType=VARCHAR},
      </if>
      <if test="qrCodeOrderSn != null">
        qr_code_order_sn = #{qrCodeOrderSn,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.nuoze.cctower.pojo.entity.ParkingRecord">
    update parking_record
    set uuid = #{uuid,jdbcType=VARCHAR},
      open_id = #{openId,jdbcType=VARCHAR},
      order_sn = #{orderSn,jdbcType=VARCHAR},
      prepay_id = #{prepayId,jdbcType=VARCHAR},
      pay_id = #{payId,jdbcType=VARCHAR},
      pay_type = #{payType,jdbcType=TINYINT},
      car_number = #{carNumber,jdbcType=VARCHAR},
      parking_id = #{parkingId,jdbcType=BIGINT},
      entrance_id = #{entranceId,jdbcType=BIGINT},
      exit_id = #{exitId,jdbcType=BIGINT},
      unit_price = #{unitPrice,jdbcType=DECIMAL},
      cost_time = #{costTime,jdbcType=INTEGER},
      cost = #{cost,jdbcType=DECIMAL},
      pay_status = #{payStatus,jdbcType=TINYINT},
      `status` = #{status,jdbcType=TINYINT},
      in_time = #{inTime,jdbcType=TIMESTAMP},
      pay_time = #{payTime,jdbcType=TIMESTAMP},
      out_time = #{outTime,jdbcType=TIMESTAMP},
      applet_order_sn = #{appletOrderSn,jdbcType=VARCHAR},
      qr_code_order_sn = #{qrCodeOrderSnfindByOrderSn,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="findByParkingIdAndCarNumberAndStatus" resultMap="BaseResultMap">
    select <include refid="Base_Column_List" />
    from parking_record
    where parking_id = #{parkingId}
    and car_number = #{carNumber}
    and status != 1 order by in_time desc limit 0,1
  </select>

  <select id="findByCarNumberAndStatus" resultMap="BaseResultMap">
    select <include refid="Base_Column_List" />
    from parking_record
    where car_number = #{carNumber}
    and status != 1
  </select>

  <select id="findByOrderSn" resultMap="BaseResultMap">
    SELECT <include refid="Base_Column_List" />
    FROM parking_record
    WHERE order_sn = #{orderSn} OR applet_order_sn= #{orderSn} OR qr_code_order_sn= #{orderSn}
    LIMIT 1
  </select>

  <select id="findByParkingId" resultMap="BaseResultMap">
    select <include refid="Base_Column_List" />
    from parking_record
    where parking_id = #{parkingId}
  </select>

  <select id="listByParkingId" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from parking_record
    <where>
      <if test="parkingId != null and parkingId != ''">and parking_id = #{parkingId}</if>
      <if test="parkingIds != null and parkingIds.size > 0 ">
        and parking_id in
        <foreach item="parkingId" collection="parkingIds" open="(" separator="," close=")">
          #{parkingId}
        </foreach>
      </if>
    </where>
    order by in_time desc
    <if test="offset != null and limit != null">
      limit #{offset}, #{limit}
    </if>
  </select>

  <select id="countByParkingId" resultType="int">
    select count(id) from parking_record
    <where>
      <if test="parkingId != null and parkingId != ''">and parking_id = #{parkingId}</if>
      <if test="parkingIds != null and parkingIds.size > 0 ">
        and parking_id in
        <foreach item="parkingId" collection="parkingIds" open="(" separator="," close=")">
          #{parkingId}
        </foreach>
      </if>
    </where>
  </select>

  <select id="findByUuid" resultMap="BaseResultMap">
    select <include refid="Base_Column_List" />
    from parking_record
    where uuid = #{uuid}
  </select>

 <select id="findByParkingIdAndIp" resultMap="BaseResultMap">
   select <include refid="Base_Column_List" />
   from parking_record
   where status=2 and parking_id = #{parkingId} and exit_id=#{exitId} order by out_time desc limit 0,1
 </select>
</mapper>