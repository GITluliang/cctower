<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nuoze.cctower.dao.PassagewayDAO">
  <resultMap id="BaseResultMap" type="com.nuoze.cctower.pojo.entity.Passageway">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="ip" jdbcType="VARCHAR" property="ip" />
    <result column="parking_id" jdbcType="BIGINT" property="parkingId" />
    <result column="type" jdbcType="TINYINT" property="type" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Base_Column_List">
    id, `name`, ip, parking_id, `type`, create_time, update_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from passageway
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from passageway
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.nuoze.cctower.pojo.entity.Passageway">
    insert into passageway (id, `name`, ip, 
      parking_id, `type`, create_time, 
      update_time)
    values (#{id,jdbcType=BIGINT}, #{name,jdbcType=VARCHAR}, #{ip,jdbcType=VARCHAR}, 
      #{parkingId,jdbcType=BIGINT}, #{type,jdbcType=TINYINT}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.nuoze.cctower.pojo.entity.Passageway">
    insert into passageway
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="name != null">
        `name`,
      </if>
      <if test="ip != null">
        ip,
      </if>
      <if test="parkingId != null">
        parking_id,
      </if>
      <if test="type != null">
        `type`,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="ip != null">
        #{ip,jdbcType=VARCHAR},
      </if>
      <if test="parkingId != null">
        #{parkingId,jdbcType=BIGINT},
      </if>
      <if test="type != null">
        #{type,jdbcType=TINYINT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.nuoze.cctower.pojo.entity.Passageway">
    update passageway
    <set>
      <if test="name != null">
        `name` = #{name,jdbcType=VARCHAR},
      </if>
      <if test="ip != null">
        ip = #{ip,jdbcType=VARCHAR},
      </if>
      <if test="parkingId != null">
        parking_id = #{parkingId,jdbcType=BIGINT},
      </if>
      <if test="type != null">
        `type` = #{type,jdbcType=TINYINT},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.nuoze.cctower.pojo.entity.Passageway">
    update passageway
    set `name` = #{name,jdbcType=VARCHAR},
      ip = #{ip,jdbcType=VARCHAR},
      parking_id = #{parkingId,jdbcType=BIGINT},
      `type` = #{type,jdbcType=TINYINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="list" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from passageway
    <where>
      <if test="id != null and id != ''">and id = #{id}</if>
      <if test="name != null and name != ''">and name = #{name}</if>
      <if test="ip != null and ip != ''">and ip = #{ip}</if>
      <if test="parkingId != null and parkingId != ''">and parking_id = #{parkingId}</if>
      <if test="type != null and type != ''">and type = #{type}</if>
      <if test="keyword != null and keyword != ''">
        AND (name LIKE CONCAT('%',#{name},'%')
        OR ip LIKE CONCAT('%',#{ip},'%'))
      </if>
      <if test="parkingIds != null and parkingIds.size > 0 ">
        and parking_id in
        <foreach item="parkingId" collection="parkingIds" open="(" separator="," close=")">
          #{parkingId}
        </foreach>
      </if>
    </where>
    <choose>
      <when test="sort != null and sort.trim() != ''">
        order by ${sort} ${order}
      </when>
      <otherwise>
        order by id desc
      </otherwise>
    </choose>
    <if test="offset != null and limit != null">
      limit #{offset}, #{limit}
    </if>
  </select>

  <select id="count" resultType="int">
    select count(id) from passageway
    <where>
      <if test="id != null and id != ''">and id = #{id}</if>
      <if test="name != null and name != ''">and name = #{name}</if>
      <if test="ip != null and ip != ''">and ip = #{ip}</if>
      <if test="parkingId != null and parkingId != ''">and parking_id = #{parkingId}</if>
      <if test="type != null and type != ''">and type = #{type}</if>
      <if test="keyword != null and keyword != ''">
        AND (name LIKE CONCAT('%',#{name},'%')
        OR ip LIKE CONCAT('%',#{ip},'%'))
      </if>
      <if test="parkingIds != null and parkingIds.size > 0 ">
        and parking_id in
        <foreach item="parkingId" collection="parkingIds" open="(" separator="," close=")">
          #{parkingId}
        </foreach>
      </if>
    </where>
  </select>

  <delete id="batchRemove">
    delete
    from passageway
    where id in
    <foreach item="id" collection="array" open="(" separator="," close=")">
      #{id}
    </foreach>
  </delete>

  <select id="findByParkingIdAndIp" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from passageway
    where parking_id = #{parkingId}
    and ip = #{ip};
  </select>

  <delete id="deleteByParkingIdAndIp">
    delete from passageway
    where parking_id = #{parkingId}
    and ip = #{ip}
  </delete>
</mapper>